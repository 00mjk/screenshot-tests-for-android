buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.3'
    }
}

apply plugin: 'com.android.library'

repositories {
    jcenter()
}

dependencies {
    compile 'junit:junit:4.12'
    compile 'org.mockito:mockito-core:1.+'
    compile 'com.google.dexmaker:dexmaker:1.0'
    compile 'com.google.dexmaker:dexmaker-mockito:1.0'
    compile 'com.android.support.test:runner:0.3'

    androidTestCompile 'com.android.support:support-v4:21.0.0'
    androidTestCompile 'com.android.support.test:runner:0.3'
    androidTestCompile 'com.android.support.test:rules:0.3'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
}

task pyTests(type: Exec) {
     workingDir 'src/py'
     commandLine 'python', '-m', 'unittest', 'discover'
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    defaultConfig {
        minSdkVersion 9
        testInstrumentationRunner "com.facebook.testing.screenshot.ScreenshotTestRunner"
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
    }
}

class ScreenshotsPluginExtension {
    def bin = "./pull_screenshots"
    def package_name = null
}

class ScreenshotsPlugin implements Plugin<Project> {
  void apply(Project project) {
    project.extensions.create("screenshots", ScreenshotsPluginExtension)

    def depTarget = ":packageDebugAndroidTest"
    project.task('pullScreenshots', dependsOn: depTarget) << {
      def output = project.tasks.getByPath(depTarget).getOutputs().getFiles().getSingleFile().getAbsolutePath()
      println output
      project.exec {
        executable = project.screenshots.bin
        args = ["--apk", output.toString()]
      }
    }
  }
}

apply plugin: ScreenshotsPlugin
